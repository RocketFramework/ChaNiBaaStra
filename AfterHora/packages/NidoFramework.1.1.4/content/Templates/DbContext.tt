<#@ assembly   name        = "Microsoft.CSharp"             #>
<#@ assembly   name        = "System.Core"                  #>
<#@ assembly   name        = "System.Data"                  #>
<#@ assembly   name        = "System.Data.Entity.Design"    #>
<#@ import     namespace   = "System.Collections.Generic"   #>
<#@ import     namespace   = "System.Dynamic"               #>
<#@ import     namespace   = "System.Linq"                  #>
<#@ import     namespace   = "System.Data.SqlClient"        #>
<#@ import     namespace   = "System.Data.Entity.Design"    #>

<#
	var namespaceName    = "";
	var namespaceNameOld = "";
	namespaceName = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString();
	string[] names = namespaceName.Split('.');
	namespaceName = "";
	for (int i=0; i<names.Length-1; i++)
    {
		namespaceName += names[i] + ".";
    }
	namespaceNameOld = namespaceName;
	namespaceName += "DB";
	// Update the connection string to something appropriate
	var connectionString = @"data source=MAS-LT-ICT011;initial catalog=School;user id=smstest;password=welcome@123;multipleactiveresultsets=True;";

   using (var db = new SqlConnection (connectionString))
   using (var cmd = db.CreateCommand ())
   {
	   SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(connectionString);
	   	var dbContextName = builder.InitialCatalog + "DBContext";
      db.Open();
      var tables              = ReadRows (cmd, "SELECT * FROM sys.tables").ToArray ();

      var columns             = ReadRows (cmd, "SELECT * FROM sys.columns").ToLookup (k => k.object_id);

      var indexes             = ReadRows (cmd, "SELECT * FROM sys.indexes").ToLookup (k => k.object_id);
      var indexColumns        = ReadRows (cmd, "SELECT * FROM sys.index_columns").ToLookup (k => k.object_id);

      var foreignKeys         = ReadRows (cmd, "SELECT * FROM sys.foreign_keys").ToArray ();
      var foreignKeyColumns   = ReadRows (cmd, "SELECT * FROM sys.foreign_key_columns").ToArray ();
#>
using System.Data.Entity;
using Nido.Common.BackEnd;
using <#=namespaceNameOld#>Models;

namespace <#=namespaceName#>
{
    public class <#=dbContextName#> : BaseObjectConext
    {
<#
		foreach (var table in tables)
		{ 
			var name = System.Data.Entity.Design.PluralizationServices.PluralizationService.
			CreateService(System.Globalization.CultureInfo.CurrentUICulture).Pluralize(table.name);
#>
        public DbSet<<#=table.name#>> <#=name#> { get; set; }
<#
        }
#>
    }
}
<#
   }
#>
<#+

   struct DataType
   {     
      public readonly int     SizeOf;
      public readonly string  SingularType;
      public readonly string  PluralType;

      public DataType (
         int sizeOf,
         string singularType,
         string pluralType = null
         )
      {
         SizeOf         = sizeOf;
         SingularType   = singularType;
         PluralType     = pluralType ?? (singularType + "[]");
      }

   }
   static Dictionary<int, DataType> dataTypes = new Dictionary<int, DataType>
      {
         {61   , new DataType (8,  "DateTime"            )},
         {127  , new DataType (8,  "long"                )},
         {165  , new DataType (1,  "byte"                )},
         {231  , new DataType (2,  "char"    ,  "string" )},
         {56   , new DataType(3222222, "int")},
         {256  , new DataType(500, "string")},    
		 {167  , new DataType(500, "string")}, 
		 {40  , new DataType(150, "DateTime")}, 
		 {104  , new DataType(2, "bool")}, 
      };

   static string MapToType (int typeId, int maxLength, bool isNullable)
   {
      DataType dataType;

      if (dataTypes.TryGetValue (typeId, out dataType))
      {
         var length = maxLength > 0 ? (maxLength / dataType.SizeOf) : int.MaxValue;
         if (length > 1)
         {
            return dataType.PluralType;
         }
         else
         {
            return dataType.SingularType + (isNullable ? "?" : "");
         }
      }
      else
      {
         return "UnknownType_"+ typeId;
      }
   }

   static IEnumerable<dynamic> ReadRows (SqlCommand command, string sql)
   {
      command.CommandText = sql ?? "";

      using (var reader = command.ExecuteReader())
      {
         while (reader.Read())
         {
            var dyn = new ExpandoObject ();
            IDictionary<string, object> dic = dyn;

            for (var iter = 0; iter < reader.FieldCount; ++iter)
            {
                  dic[reader.GetName(iter) ?? ""] = reader.GetValue(iter);
            }

            yield return dyn;
         }

      }
   }


#>